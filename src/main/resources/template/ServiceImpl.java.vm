package ${package}.modules.${moduleName}.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import ${package}.common.constant.Constant;
import ${package}.common.page.PageData;
import ${package}.common.service.impl.BaseServiceImpl;
import ${package}.common.utils.ConvertUtils;
import ${package}.modules.demo.dao.${className}Dao;
import ${package}.modules.demo.dto.${className}DTO;
import ${package}.modules.demo.entity.${className}Entity;
import ${package}.modules.demo.service.${className}Service;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

/**
 * ${comments}
 *
 * @author ${author} ${email}
 * @since ${version} ${date}
 */
@Service
public class ${className}ServiceImpl extends BaseServiceImpl<${className}Dao, ${className}Entity> implements ${className}Service {

    @Override
    public PageData<${className}DTO> page(Map<String, Object> params) {
        IPage<${className}Entity> page = baseDao.selectPage(
                getPage(params, Constant.CREATE_DATE, false),
                getWrapper(params)
        );

        return getPageData(page, ${className}DTO.class);
    }

    @Override
    public List<${className}DTO> list(Map<String, Object> params) {
        List<${className}Entity> entityList = baseDao.selectList(getWrapper(params));

        return ConvertUtils.sourceToTarget(entityList, ${className}DTO.class);
    }

    private QueryWrapper<${className}Entity> getWrapper(Map<String, Object> params){
        String id = (String)params.get("id");

        QueryWrapper<${className}Entity> wrapper = new QueryWrapper<>();
        wrapper.eq(StringUtils.isNotBlank(id), "id", id);

        return wrapper;
    }

    @Override
    public ${className}DTO get(String id) {
        ${className}Entity entity = baseDao.selectById(id);

        return ConvertUtils.sourceToTarget(entity, ${className}DTO.class);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void save(${className}DTO dto) {
        ${className}Entity entity = ConvertUtils.sourceToTarget(dto, ${className}Entity.class);

        insert(entity);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void update(${className}DTO dto) {
        ${className}Entity entity = ConvertUtils.sourceToTarget(dto, ${className}Entity.class);

        updateById(entity);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void delete(String[] ids) {
        baseDao.deleteBatchIds(Arrays.asList(ids));
    }

}